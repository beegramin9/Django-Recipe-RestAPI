# docker-compose 파일은 해당 프로젝트를 위한 모든 configuration을 가지고 있다.

# docker-compose version
version: "3"

services:
  # 내 service의 이름, app. 지금은 이거 하나만 필요함
  app:
    # configuration의 build 섹션의 context를 .(=현재 디렉토리)으로
    build:
      context: .
    # "내 로컬 머신의 port를 8000으로, 내 이미지의 port를 8000으로"
    ports:
      - "8000:8000"
    # volume은 내가 만든 도커 이미지 안에서 리얼타임으로 업데이트 가능하게 함
    # 도커 이미지 configuration을 위한 nodemon 같은 것
    volumes:
      - ./app:/app

    # 앱을 실행하기 위한 command 설정
    # shell에서 command로 실행하겠다
    # 도커 이미지가 8000이기만 하면 모든 ip주소에서 run 가능

    #  sudo docker-compose run app sh -c "django-admin.py startproject app ." 으로 쟝고 프로젝트 시작
    command: >
      sh -c "python manage.py runserver 0.0.0.0:8000"

    environment:
      # 내 db와 이름이 같아야 한다. 즉 아래 db를 그대로 쓰면 된다
      - DB_HOST=db
      # POSTGRES_DB와 같음
      - DB_NAME=app
      # POSTGRES_USER
      - DB_USER=postgres
      # POSTGRES_PASSWORD
      - DB_PASS=supersecretpassword
      # app이 db에 depend하게됨
      # app에서 db가 accessible
      # db가 app 시작 전에 먼저 시작되고
      # host 이름을 db로 하면 데이터베이스 서버가 온라인으로 available해짐

    depends_on:
      - db

  db:
    image: postgres:10-alpine
    # DB이름, username, password
    environment:
      - POSTGRES_DB=app
      - POSTGRES_USER=postgres
      # production할때는 encrypt된 환경변수를 입력할 것.
      - POSTGRES_PASSWORD=supersecretpassword


# Docker와 communicate하게 해주는 파이썬 패키지를
# Docker File 디펜던시에 넣어주면 된다.